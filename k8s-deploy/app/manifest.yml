apiVersion: v1
kind: Namespace
metadata:
  name: k8s-project

---
# Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: deploy-config-map
  namespace: k8s-project
data:
  users_db_init.sql: |
    CREATE TABLE user_account(
    id 				SERIAL 			PRIMARY KEY,
    username 		VARCHAR (255) 	UNIQUE NOT NULL,
    amountOfposts	VARCHAR (255));

  posts_db_init.sql: |
    CREATE TABLE post(
    id 				SERIAL 			PRIMARY KEY,
    author_id 		INT 			NOT NULL,
    topic 			VARCHAR (255) 	        ,
    text 			VARCHAR (255) 	NOT NULL,
    posted_at		TIMESTAMPTZ		NOT NULL );

---
# DB for the users-app
apiVersion: v1
kind: Service
metadata:
  name: users-db
  namespace: k8s-project
spec:
  clusterIP: None
  ports:
    - port: 5432
  selector:
    app: users-db-pod
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: users-db
  namespace: k8s-project
spec:
  selector:
    matchLabels:
      app: users-db-pod
  template:
    metadata:
      labels:
        app: users-db-pod
    spec:
      containers:
        - name: users-db-pod-container
          image: postgres:15.2
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_dbname
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_password
          volumeMounts:
            - name: storage
              mountPath: /var/lib/postgresql/data
            - name: users-db-init
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: users-db-storage-claim
        - name: users-db-init
          configMap:
            name: deploy-config-map
            items:
              - key: users_db_init.sql
                path: users_db_init.sql

---
# DB for the posts-app
apiVersion: v1
kind: Service
metadata:
  name: posts-db
  namespace: k8s-project
spec:
  clusterIP: None
  ports:
    - port: 5432
  selector:
    app: posts-db-pod
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: posts-db
  namespace: k8s-project
spec:
  selector:
    matchLabels:
      app: posts-db-pod
  template:
    metadata:
      labels:
        app: posts-db-pod
    spec:
      containers:
        - name: posts-db-pod-container
          image: postgres:15.2
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_dbname
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_password
          volumeMounts:
            - name: storage
              mountPath: /var/lib/postgresql/data
            - name: posts-db-init
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: posts-db-storage-claim
        - name: posts-db-init
          configMap:
            name: deploy-config-map
            items:
              - key: posts_db_init.sql
                path: posts_db_init.sql

---
# The users-app
apiVersion: v1
kind: Service
metadata:
  name: users-app
  namespace: k8s-project
spec:
  type: NodePort
  selector:
    app: users-app-pod
  ports:
    - name: http
      port: 8001
      targetPort: 8080
      protocol: TCP
      nodePort: 30001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: users-app
  namespace: k8s-project
spec:
  selector:
    matchLabels:
      app: users-app-pod
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: users-app-pod
        owner: aleh_hahalinski
    spec:
      containers:
        - name: user-app-pod-container
          image: hahalinskidev211020/k8s-users-app:2.0.0
          ports:
            - name: liveness-port
              containerPort: 8080
          env:
            - name: DB_HOST_PORT
              value: users-db
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_dbname
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: users_app_db_password
          volumeMounts:
            - name: storage
              mountPath: /data/service
          startupProbe:
            httpGet:
              path: /actuator/health
              port: liveness-port
            failureThreshold: 2
            periodSeconds: 10
            initialDelaySeconds: 25
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: liveness-port
            failureThreshold: 3
            periodSeconds: 3
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: liveness-port
            failureThreshold: 3
            periodSeconds: 5
            initialDelaySeconds: 5
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: users-app-storage-claim

---
# The posts-app
apiVersion: v1
kind: Service
metadata:
  name: posts-app
  namespace: k8s-project
spec:
  type: NodePort
  selector:
    app: posts-app-pod
  ports:
    - name: http
      port: 8002
      targetPort: 8080
      protocol: TCP
      nodePort: 30002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts-app
  namespace: k8s-project
spec:
  selector:
    matchLabels:
      app: posts-app-pod
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: posts-app-pod
        owner: aleh_hahalinski
    spec:
      containers:
        - name: post-app-pod-container
          image: hahalinskidev211020/k8s-posts-app:2.0.0
          ports:
            - name: liveness-port
              containerPort: 8080
          env:
            - name: USER_APP_URL
              value: http://users-app:8001
            - name: DB_HOST_PORT
              value: posts-db
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_dbname
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: posts_app_db_password
          startupProbe:
            httpGet:
              path: /actuator/health
              port: liveness-port
            failureThreshold: 2
            periodSeconds: 10
            initialDelaySeconds: 25
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: liveness-port
            failureThreshold: 3
            periodSeconds: 3
            initialDelaySeconds: 5
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: liveness-port
            failureThreshold: 3
            periodSeconds: 5
            initialDelaySeconds: 5